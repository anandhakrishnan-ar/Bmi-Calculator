{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","reportWebVitals.js","index.js"],"names":["FormInput","props","type","name","value","title","onChange","className","BmiCalculator","getBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","height","inches","weight","count","setCount","useEffect","imperialBmi","metricBmi","onChangeInput","e","target","prevState","heightInMeters","bmi","Math","round","heightInInches","parseInt","id","onClick","preventDefault","BMI","bmiValue","setBmiValue","result","setResult","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.047e3af1.chunk.js","sourcesContent":["import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst FormInput = props => {\r\n    const {\r\n        type,\r\n        name,\r\n        value,\r\n        title,\r\n        onChange\r\n    } = props;\r\n\r\n\r\n    return (\r\n        <div className=\"col-md-12 form-group\">\r\n            <span className=\"font-weight-bold\">{title}:</span>\r\n            <input className=\"form-control form-control-sm\" type={type} name={name} value={value} onChange={onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// FormInput.propTypes = {\r\n//     type:PropTypes.oneOf([\"text\",\"number\"]),\r\n//     name:PropTypes.string,\r\n//     value:PropTypes.string,\r\n// }\r\n\r\nexport default FormInput\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport FormInput from './FormInput'\r\nconst BmiCalculator = props => {\r\n    const { getBmiValue } = props;\r\n    const [heightUnit, setHeightUnit] = useState('cm');\r\n    const [weightUnit, setWeightUnit] = useState('kg');\r\n    const [unit, setUnit] = useState('Metric');\r\n    const [count, setCount] = useState({\r\n        height: 0, inches: 0, weight: 0\r\n    });\r\n    const { height, inches, weight } = count;\r\n    useEffect(() => {        \r\n        if(unit===\"Imperial\"){\r\n            imperialBmi(height, inches, weight)\r\n        }\r\n        else{\r\n            metricBmi(height, weight);\r\n        }\r\n         // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [height, weight, inches])\r\n    const onChangeInput = e => {\r\n        const { name, value } = e.target;\r\n        setCount(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }));\r\n\r\n        //getBmiValue(3);\r\n    };\r\n    const metricBmi = (height, weight) => {\r\n        if (height > 0 && weight > 0) {\r\n            const heightInMeters = height / 100;\r\n            const bmi = weight / (heightInMeters * heightInMeters);\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n\r\n    }\r\n    const imperialBmi = (height, inches, weight) => {\r\n        if ((height > 0 || inches > 0) && weight > 0) {\r\n            const heightInInches = (height * 12) + parseInt(inches);\r\n            debugger\r\n            const bmi = 703 * (weight / (heightInInches * heightInInches));\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n\r\n    }\r\n    const onSelectChange = e => {\r\n        setUnit(e.target.value);\r\n        if (e.target.value === 'Metric') {\r\n            setHeightUnit('cm');\r\n            setWeightUnit('kg');\r\n        }\r\n        else {\r\n            setHeightUnit('ft');\r\n            setWeightUnit('lbs');\r\n        }\r\n        setCount({ height: 0, weight: 0, inches: 0 });\r\n        getBmiValue(0);\r\n    };\r\n    const resetInput = e => {\r\n        e.preventDefault();\r\n        setUnit('Metric');\r\n        setHeightUnit('cm');\r\n        setWeightUnit('kg');\r\n        setCount({ height: 0, weight: 0, inches: 0 });\r\n        getBmiValue(0);\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form-group col-md-12\">\r\n                <label>Unit</label>\r\n                <select onChange={onSelectChange} className=\"form-control\" id=\"selectUnit\" value={unit}>\r\n                    <option value=\"Metric\">Metric</option>\r\n                    <option value=\"Imperial\">Imperial</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <FormInput title={`Height(${heightUnit})`} value={height} name=\"height\" type=\"number\" onChange={onChangeInput} />\r\n                {\r\n                    unit === 'Imperial' ? <FormInput title=\"Inches (in)\" value={inches} name=\"inches\" type=\"number\" onChange={onChangeInput} /> : \"\"\r\n                }\r\n                <FormInput title={`Weight(${weightUnit})`} value={weight} name=\"weight\" type=\"number\" onChange={onChangeInput} />\r\n            </div>\r\n            <div className=\"reset-btn\">\r\n                <button className=\"btn-primary col-md-12\" onClick={resetInput}>Reset</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nBmiCalculator.propTypes = {\r\n    getBmiValue: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BmiCalculator\r\n","import React, { useState, useEffect } from 'react'\r\nimport BmiCalculator from './BmiCalculator'\r\n\r\nconst BMI = () => {\r\n    const [bmiValue, setBmiValue] = useState(0);\r\n    const [result, setResult] = useState('')\r\n    useEffect(() => {\r\n        if (bmiValue > 0 && bmiValue < 18.5) {\r\n            setResult('Underweight')\r\n        }\r\n        else if (bmiValue >= 18.5 && bmiValue < 23) {\r\n            setResult('Normal')\r\n        }\r\n        else if (bmiValue >= 23 && bmiValue < 25) {\r\n            setResult('Overweight')\r\n        }\r\n        else if (bmiValue >= 25 && bmiValue < 30) {\r\n            setResult('Pre-Obese')\r\n        }\r\n        else if (bmiValue >= 30) {\r\n            setResult('Obese')\r\n        }\r\n        else {\r\n            setResult('')\r\n        }\r\n\r\n    }, [bmiValue])\r\n    return (\r\n        <div className=\"calculator-wrapper\">\r\n            <div className=\"app-header\"><h3>BMI CALCULATOR</h3></div>\r\n            <div className=\"app-header\">\r\n                Body Mass Index(BMI) : {bmiValue}\r\n            </div>\r\n            <div className=\"app-result font-weight-light\">\r\n                {result}\r\n            </div>\r\n            <BmiCalculator getBmiValue={setBmiValue} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BMI\r\n","import './App.css';\nimport React from 'react' \nimport BMI from './components/BMI';\n\nfunction App() {\n  return (\n    <div className=\"main-wrapper\">\n      <BMI/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}